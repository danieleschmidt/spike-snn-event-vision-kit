# =====================================================================================
# ARGOCD GLOBAL MULTI-REGION CONFIGURATION
# =====================================================================================
# GitOps-based multi-region deployment management with ArgoCD for automated
# deployment, synchronization, and disaster recovery across global regions.
# =====================================================================================

# ArgoCD Application of Applications for Multi-Region
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: neuromorphic-global
  namespace: argocd
  labels:
    app.kubernetes.io/name: neuromorphic-global
    app.kubernetes.io/part-of: neuromorphic-vision
spec:
  project: neuromorphic-production
  
  source:
    repoURL: https://github.com/neuromorphic/deployment-configs
    path: global/
    targetRevision: HEAD
    
    # Helm configuration for global deployment
    helm:
      valueFiles:
        - values-global.yaml
        - values-production.yaml
      
      parameters:
        - name: global.environment
          value: production
        - name: global.multiRegion.enabled
          value: "true"
        - name: global.version
          value: v1.0.0
  
  destination:
    server: https://kubernetes.default.svc
    namespace: neuromorphic-system
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
      allowEmpty: false
    
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
      - PruneLast=true
      - RespectIgnoreDifferences=true
    
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  
  # Health checks and readiness
  ignoreDifferences:
    - group: apps
      kind: Deployment
      jsonPointers:
        - /spec/replicas
    - group: argoproj.io
      kind: Application
      jsonPointers:
        - /status
  
  # Finalizers for cleanup
  finalizers:
    - resources-finalizer.argocd.argoproj.io

---
# ArgoCD Project for Neuromorphic Production
apiVersion: argoproj.io/v1alpha1
kind: AppProject
metadata:
  name: neuromorphic-production
  namespace: argocd
  labels:
    project: neuromorphic-vision
spec:
  description: Production deployment project for Neuromorphic Vision across all regions
  
  # Source repositories
  sourceRepos:
    - https://github.com/neuromorphic/deployment-configs
    - https://github.com/neuromorphic/helm-charts
    - https://registry.neuromorphic.production.com/*
  
  # Destination clusters and namespaces
  destinations:
    # Primary region (US West)
    - namespace: neuromorphic-vision
      server: https://spike-snn-prod-cluster.us-west-2.eksctl.io
    - namespace: neuromorphic-system
      server: https://spike-snn-prod-cluster.us-west-2.eksctl.io
    - namespace: monitoring
      server: https://spike-snn-prod-cluster.us-west-2.eksctl.io
    
    # US East region
    - namespace: neuromorphic-vision
      server: https://spike-snn-us-east-cluster.us-east-1.eksctl.io
    - namespace: neuromorphic-system
      server: https://spike-snn-us-east-cluster.us-east-1.eksctl.io
    
    # EU region
    - namespace: neuromorphic-vision
      server: https://spike-snn-eu-west-cluster.eu-west-1.eksctl.io
    - namespace: neuromorphic-system
      server: https://spike-snn-eu-west-cluster.eu-west-1.eksctl.io
    
    # APAC region
    - namespace: neuromorphic-vision
      server: https://spike-snn-apac-cluster.ap-southeast-1.eksctl.io
    - namespace: neuromorphic-system
      server: https://spike-snn-apac-cluster.ap-southeast-1.eksctl.io
  
  # Cluster resource whitelist
  clusterResourceWhitelist:
    - group: ""
      kind: Namespace
    - group: rbac.authorization.k8s.io
      kind: ClusterRole
    - group: rbac.authorization.k8s.io
      kind: ClusterRoleBinding
    - group: apiextensions.k8s.io
      kind: CustomResourceDefinition
    - group: networking.istio.io
      kind: Gateway
    - group: networking.istio.io
      kind: VirtualService
    - group: security.istio.io
      kind: PeerAuthentication
  
  # Namespace resource whitelist
  namespaceResourceWhitelist:
    - group: ""
      kind: ConfigMap
    - group: ""
      kind: Secret
    - group: ""
      kind: Service
    - group: ""
      kind: ServiceAccount
    - group: apps
      kind: Deployment
    - group: apps
      kind: StatefulSet
    - group: apps
      kind: ReplicaSet
    - group: autoscaling
      kind: HorizontalPodAutoscaler
    - group: networking.k8s.io
      kind: Ingress
    - group: networking.k8s.io
      kind: NetworkPolicy
    - group: policy
      kind: PodDisruptionBudget
    - group: monitoring.coreos.com
      kind: ServiceMonitor
    - group: networking.istio.io
      kind: DestinationRule
    - group: networking.istio.io
      kind: ServiceEntry
  
  # RBAC policies
  roles:
    # Production deployment role
    - name: production-deployer
      description: Can deploy to production environments
      policies:
        - p, proj:neuromorphic-production:production-deployer, applications, *, neuromorphic-production/*, allow
        - p, proj:neuromorphic-production:production-deployer, repositories, *, *, allow
        - p, proj:neuromorphic-production:production-deployer, certificates, *, *, allow
      groups:
        - neuromorphic:production-team
        - neuromorphic:devops-team
    
    # Read-only role for monitoring
    - name: production-viewer
      description: Can view production deployments
      policies:
        - p, proj:neuromorphic-production:production-viewer, applications, get, neuromorphic-production/*, allow
        - p, proj:neuromorphic-production:production-viewer, repositories, get, *, allow
      groups:
        - neuromorphic:monitoring-team
        - neuromorphic:support-team
  
  # Sync windows
  syncWindows:
    # Allow automatic sync during business hours (UTC)
    - kind: allow
      schedule: "0 6-18 * * 1-5"  # Monday-Friday, 6 AM to 6 PM UTC
      duration: 12h
      applications:
        - "*"
      manualSync: true
    
    # Deny automatic sync during maintenance window
    - kind: deny
      schedule: "0 2-4 * * 0"     # Sunday, 2 AM to 4 AM UTC
      duration: 2h
      applications:
        - "*"
      manualSync: false
  
  # Signature verification (for security)
  signatureKeys:
    - keyID: neuromorphic-production-key
  
  # Orphaned resources policy
  orphanedResources:
    warn: true
    ignore:
      - group: ""
        kind: ConfigMap
        name: kube-root-ca.crt
      - group: ""
        kind: Secret
        name: sh.helm.release.*

---
# Regional Application Template - US West (Primary)
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: neuromorphic-us-west-2
  namespace: argocd
  labels:
    app.kubernetes.io/name: neuromorphic-us-west-2
    region: us-west-2
    role: primary
spec:
  project: neuromorphic-production
  
  source:
    repoURL: https://github.com/neuromorphic/helm-charts
    path: neuromorphic-vision/
    targetRevision: v1.0.0
    
    helm:
      valueFiles:
        - values.yaml
        - values-production.yaml
        - values-us-west-2.yaml
      
      parameters:
        - name: global.region
          value: us-west-2
        - name: global.primary
          value: "true"
        - name: global.environment
          value: production
        - name: replicaCount
          value: "5"
        - name: autoscaling.maxReplicas
          value: "50"
        - name: resources.limits.nvidia\.com/gpu
          value: "1"
        - name: nodeSelector.workload-type
          value: neuromorphic
        - name: nodeSelector.node-type
          value: gpu
        - name: tolerations[0].key
          value: nvidia.com/gpu
        - name: tolerations[0].operator
          value: Equal
        - name: tolerations[0].value
          value: "true"
        - name: tolerations[0].effect
          value: NoSchedule
  
  destination:
    server: https://spike-snn-prod-cluster.us-west-2.eksctl.io
    namespace: neuromorphic-vision
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
      - PrunePropagationPolicy=foreground
    retry:
      limit: 5
      backoff:
        duration: 5s
        factor: 2
        maxDuration: 3m
  
  # Health assessment
  health:
    - group: apps
      kind: Deployment
      check: |
        hs = {}
        if obj.status ~= nil then
          if obj.status.replicas ~= nil and obj.status.replicas > 0 then
            if obj.status.availableReplicas ~= nil and obj.status.availableReplicas >= obj.status.replicas then
              hs.status = "Healthy"
              hs.message = "All replicas are available"
            else
              hs.status = "Progressing"
              hs.message = "Waiting for replicas to become available"
            end
          else
            hs.status = "Suspended"
            hs.message = "Deployment is suspended"
          end
        end
        return hs
  
  finalizers:
    - resources-finalizer.argocd.argoproj.io

---
# Regional Application Template - US East
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: neuromorphic-us-east-1
  namespace: argocd
  labels:
    app.kubernetes.io/name: neuromorphic-us-east-1
    region: us-east-1
    role: secondary
spec:
  project: neuromorphic-production
  
  source:
    repoURL: https://github.com/neuromorphic/helm-charts
    path: neuromorphic-vision/
    targetRevision: v1.0.0
    
    helm:
      valueFiles:
        - values.yaml
        - values-production.yaml
        - values-us-east-1.yaml
      
      parameters:
        - name: global.region
          value: us-east-1
        - name: global.primary
          value: "false"
        - name: global.environment
          value: production
        - name: replicaCount
          value: "3"
        - name: autoscaling.maxReplicas
          value: "30"
        - name: nodeSelector.workload-type
          value: neuromorphic
        - name: nodeSelector.node-type
          value: gpu
  
  destination:
    server: https://spike-snn-us-east-cluster.us-east-1.eksctl.io
    namespace: neuromorphic-vision
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
  
  finalizers:
    - resources-finalizer.argocd.argoproj.io

---
# Regional Application Template - EU West
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: neuromorphic-eu-west-1
  namespace: argocd
  labels:
    app.kubernetes.io/name: neuromorphic-eu-west-1
    region: eu-west-1
    role: secondary
spec:
  project: neuromorphic-production
  
  source:
    repoURL: https://github.com/neuromorphic/helm-charts
    path: neuromorphic-vision/
    targetRevision: v1.0.0
    
    helm:
      valueFiles:
        - values.yaml
        - values-production.yaml
        - values-eu-west-1.yaml
      
      parameters:
        - name: global.region
          value: eu-west-1
        - name: global.primary
          value: "false"
        - name: global.environment
          value: production
        - name: replicaCount
          value: "3"
        - name: autoscaling.maxReplicas
          value: "25"
        - name: nodeSelector.workload-type
          value: neuromorphic
        - name: nodeSelector.node-type
          value: gpu
        - name: compliance.gdpr.enabled
          value: "true"
        - name: compliance.dataResidency
          value: eu
  
  destination:
    server: https://spike-snn-eu-west-cluster.eu-west-1.eksctl.io
    namespace: neuromorphic-vision
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
  
  finalizers:
    - resources-finalizer.argocd.argoproj.io

---
# Regional Application Template - APAC
apiVersion: argoproj.io/v1alpha1
kind: Application
metadata:
  name: neuromorphic-ap-southeast-1
  namespace: argocd
  labels:
    app.kubernetes.io/name: neuromorphic-ap-southeast-1
    region: ap-southeast-1
    role: secondary
spec:
  project: neuromorphic-production
  
  source:
    repoURL: https://github.com/neuromorphic/helm-charts
    path: neuromorphic-vision/
    targetRevision: v1.0.0
    
    helm:
      valueFiles:
        - values.yaml
        - values-production.yaml
        - values-ap-southeast-1.yaml
      
      parameters:
        - name: global.region
          value: ap-southeast-1
        - name: global.primary
          value: "false"
        - name: global.environment
          value: production
        - name: replicaCount
          value: "2"
        - name: autoscaling.maxReplicas
          value: "20"
        - name: nodeSelector.workload-type
          value: neuromorphic
        - name: nodeSelector.node-type
          value: gpu
        - name: compliance.pdpa.enabled
          value: "true"
        - name: compliance.dataResidency
          value: apac
  
  destination:
    server: https://spike-snn-apac-cluster.ap-southeast-1.eksctl.io
    namespace: neuromorphic-vision
  
  syncPolicy:
    automated:
      prune: true
      selfHeal: true
    syncOptions:
      - CreateNamespace=true
  
  finalizers:
    - resources-finalizer.argocd.argoproj.io

---
# ArgoCD Repository for Helm Charts
apiVersion: v1
kind: Secret
metadata:
  name: neuromorphic-helm-repo
  namespace: argocd
  labels:
    argocd.argoproj.io/secret-type: repository
type: Opaque
stringData:
  type: helm
  name: neuromorphic-helm
  url: https://github.com/neuromorphic/helm-charts
  username: neuromorphic-bot
  password: ${GITHUB_TOKEN}
  
---
# ArgoCD Repository for Deployment Configs
apiVersion: v1
kind: Secret
metadata:
  name: neuromorphic-config-repo
  namespace: argocd
  labels:
    argocd.argoproj.io/secret-type: repository
type: Opaque
stringData:
  type: git
  name: neuromorphic-configs
  url: https://github.com/neuromorphic/deployment-configs
  username: neuromorphic-bot
  password: ${GITHUB_TOKEN}

---
# ArgoCD Cluster Registration - US East
apiVersion: v1
kind: Secret
metadata:
  name: us-east-1-cluster
  namespace: argocd
  labels:
    argocd.argoproj.io/secret-type: cluster
type: Opaque
stringData:
  name: us-east-1
  server: https://spike-snn-us-east-cluster.us-east-1.eksctl.io
  config: |
    {
      "bearerToken": "${US_EAST_1_TOKEN}",
      "tlsClientConfig": {
        "insecure": false,
        "caData": "${US_EAST_1_CA_DATA}"
      },
      "awsAuthConfig": {
        "clusterName": "spike-snn-us-east-cluster",
        "roleARN": "arn:aws:iam::ACCOUNT:role/ArgoCD-US-East-1"
      }
    }

---
# ArgoCD Cluster Registration - EU West
apiVersion: v1
kind: Secret
metadata:
  name: eu-west-1-cluster
  namespace: argocd
  labels:
    argocd.argoproj.io/secret-type: cluster
type: Opaque
stringData:
  name: eu-west-1
  server: https://spike-snn-eu-west-cluster.eu-west-1.eksctl.io
  config: |
    {
      "bearerToken": "${EU_WEST_1_TOKEN}",
      "tlsClientConfig": {
        "insecure": false,
        "caData": "${EU_WEST_1_CA_DATA}"
      },
      "awsAuthConfig": {
        "clusterName": "spike-snn-eu-west-cluster",
        "roleARN": "arn:aws:iam::ACCOUNT:role/ArgoCD-EU-West-1"
      }
    }

---
# ArgoCD Cluster Registration - APAC
apiVersion: v1
kind: Secret
metadata:
  name: ap-southeast-1-cluster
  namespace: argocd
  labels:
    argocd.argoproj.io/secret-type: cluster
type: Opaque
stringData:
  name: ap-southeast-1
  server: https://spike-snn-apac-cluster.ap-southeast-1.eksctl.io
  config: |
    {
      "bearerToken": "${AP_SOUTHEAST_1_TOKEN}",
      "tlsClientConfig": {
        "insecure": false,
        "caData": "${AP_SOUTHEAST_1_CA_DATA}"
      },
      "awsAuthConfig": {
        "clusterName": "spike-snn-apac-cluster",
        "roleARN": "arn:aws:iam::ACCOUNT:role/ArgoCD-AP-Southeast-1"
      }
    }

---
# ArgoCD Notifications Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-notifications-controller
data:
  # Notification templates
  template.app-deployed: |
    email:
      subject: Application {{.app.metadata.name}} deployed to {{.app.spec.destination.server}}
    message: |
      {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully deployed to region {{.app.metadata.labels.region}}.
      
      Sync Status: {{.app.status.sync.status}}
      Health Status: {{.app.status.health.status}}
      Operation ID: {{.app.status.operationState.operation.sync.revision}}
      
      {{if .app.status.sync.comparedTo.source.repoURL}}Repository: {{.app.status.sync.comparedTo.source.repoURL}}{{end}}
      {{if .app.status.sync.comparedTo.source.targetRevision}}Revision: {{.app.status.sync.comparedTo.source.targetRevision}}{{end}}
      
      View in ArgoCD: https://argocd.neuromorphic.production.com/applications/{{.app.metadata.name}}
  
  template.app-health-degraded: |
    email:
      subject: Application {{.app.metadata.name}} health degraded in {{.app.metadata.labels.region}}
    message: |
      {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} health status degraded in region {{.app.metadata.labels.region}}.
      
      Health Status: {{.app.status.health.status}}
      Health Message: {{.app.status.health.message}}
      
      Immediate action may be required. Please check the application logs and metrics.
      
      View in ArgoCD: https://argocd.neuromorphic.production.com/applications/{{.app.metadata.name}}
      Grafana Dashboard: https://grafana.neuromorphic.production.com/d/neuromorphic-production
  
  template.app-sync-failed: |
    email:
      subject: Application {{.app.metadata.name}} sync failed in {{.app.metadata.labels.region}}
    message: |
      {{if eq .serviceType "slack"}}:x:{{end}} Application {{.app.metadata.name}} sync failed in region {{.app.metadata.labels.region}}.
      
      Sync Status: {{.app.status.sync.status}}
      Operation State: {{.app.status.operationState.phase}}
      Error Message: {{.app.status.operationState.message}}
      
      Please check the ArgoCD logs for more details and resolve the sync issues.
      
      View in ArgoCD: https://argocd.neuromorphic.production.com/applications/{{.app.metadata.name}}
  
  # Notification services
  service.slack: |
    token: $slack-token
    username: ArgoCD
    channel: neuromorphic-deployments
    iconEmoji: ":rocket:"
  
  service.email: |
    host: smtp.neuromorphic.production.com
    port: 587
    from: argocd@neuromorphic.production.com
    username: $email-username
    password: $email-password
  
  service.webhook.teams: |
    url: $teams-webhook-url
  
  # Subscriptions
  subscriptions: |
    - recipients:
      - slack:neuromorphic-deployments
      - email:devops-team@neuromorphic.production.com
      triggers:
      - on-deployed
      - on-health-degraded
      - on-sync-failed
      - on-sync-running
      - on-sync-succeeded
      template: app-deployed
      
    # Critical alerts for production
    - recipients:
      - slack:neuromorphic-alerts
      - email:oncall@neuromorphic.production.com
      - webhook:teams
      triggers:
      - on-health-degraded
      - on-sync-failed
      template: app-health-degraded
      when: app.metadata.labels.role == 'primary' or app.status.health.status == 'Degraded'

---
# ArgoCD Image Updater Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-image-updater-config
  namespace: argocd
  labels:
    app.kubernetes.io/name: argocd-image-updater
data:
  config.yaml: |
    # ArgoCD Image Updater configuration
    argocd:
      server: argocd-server.argocd.svc.cluster.local:443
      insecure: false
      grpcWeb: true
      plaintext: false
    
    # Git configuration
    git:
      user: argocd-image-updater
      email: argocd-image-updater@neuromorphic.production.com
    
    # Registries configuration
    registries:
      - name: ghcr
        api_url: https://ghcr.io
        prefix: ghcr.io
        credentials: pullsecret:argocd/ghcr-secret
        default: true
      
      - name: neuromorphic-registry
        api_url: https://registry.neuromorphic.production.com
        prefix: registry.neuromorphic.production.com
        credentials: pullsecret:argocd/neuromorphic-registry-secret
    
    # Update strategy
    interval: 2m
    
    # Log configuration
    log:
      level: info
      format: json
  
  # Repositories to monitor
  repositories.yaml: |
    repositories:
    - name: neuromorphic-vision
      url: https://github.com/neuromorphic/helm-charts
      type: helm
      credentials: argocd/neuromorphic-helm-repo
  
  # Applications to monitor for image updates
  applications.yaml: |
    applications:
    - name: neuromorphic-us-west-2
      images:
      - ghcr.io/neuromorphic/neuromorphic-vision:*
      update_strategy: semver
      
    - name: neuromorphic-us-east-1
      images:
      - ghcr.io/neuromorphic/neuromorphic-vision:*
      update_strategy: semver
      
    - name: neuromorphic-eu-west-1
      images:
      - ghcr.io/neuromorphic/neuromorphic-vision:*
      update_strategy: semver
      
    - name: neuromorphic-ap-southeast-1
      images:
      - ghcr.io/neuromorphic/neuromorphic-vision:*
      update_strategy: semver
