# =====================================================================================
# JAEGER DISTRIBUTED TRACING CONFIGURATION
# =====================================================================================
# Comprehensive distributed tracing setup for neuromorphic vision processing
# with sampling strategies, storage configuration, and service dependencies.
# =====================================================================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-configuration
  namespace: monitoring
  labels:
    app: jaeger
    component: configuration
data:
  # Jaeger Collector Configuration
  collector.yaml: |
    # Collector service configuration
    receivers:
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      jaeger:
        protocols:
          grpc:
            endpoint: 0.0.0.0:14250
          thrift_http:
            endpoint: 0.0.0.0:14268
          thrift_compact:
            endpoint: 0.0.0.0:14269
      zipkin:
        endpoint: 0.0.0.0:9411
    
    processors:
      batch:
        timeout: 1s
        send_batch_size: 1024
        send_batch_max_size: 2048
      
      memory_limiter:
        limit_mib: 512
        spike_limit_mib: 128
        check_interval: 5s
      
      # Resource processor to add service metadata
      resource:
        attributes:
          - key: service.namespace
            value: neuromorphic-vision
            action: upsert
          - key: deployment.environment
            value: production
            action: upsert
          - key: telemetry.sdk.name
            value: opentelemetry
            action: upsert
    
    exporters:
      # Export to Elasticsearch for long-term storage
      elasticsearch:
        endpoints: ["http://elasticsearch.monitoring.svc.cluster.local:9200"]
        index: jaeger-traces
        mapping:
          template_name: jaeger-traces
          index_patterns: ["jaeger-traces-*"]
        
        # Index lifecycle management
        ilm_policy:
          policy:
            phases:
              hot:
                actions:
                  rollover:
                    max_age: "7d"
                    max_size: "10GB"
              warm:
                min_age: "7d"
                actions:
                  shrink:
                    number_of_shards: 1
              cold:
                min_age: "30d"
              delete:
                min_age: "90d"
      
      # Export to Prometheus for metrics
      prometheus:
        endpoint: "0.0.0.0:8889"
        namespace: jaeger
        const_labels:
          service_name: jaeger-collector
          environment: production
    
    service:
      pipelines:
        traces:
          receivers: [otlp, jaeger, zipkin]
          processors: [memory_limiter, resource, batch]
          exporters: [elasticsearch, prometheus]
    
    extensions:
      health_check:
        endpoint: 0.0.0.0:13133
      pprof:
        endpoint: 0.0.0.0:1777
      zpages:
        endpoint: 0.0.0.0:55679
  
  # Jaeger Query Configuration
  query.yaml: |
    # Query service configuration
    backend_storage:
      type: elasticsearch
      
      elasticsearch:
        server_urls: ["http://elasticsearch.monitoring.svc.cluster.local:9200"]
        index_prefix: jaeger
        max_doc_count: 10000
        max_span_age: "72h"
        
        # Connection settings
        timeout: 5s
        max_connections: 30
        max_idle_connections: 10
        max_idle_time: 90s
        
        # TLS configuration (if needed)
        # tls:
        #   enabled: true
        #   cert: /path/to/cert.crt
        #   key: /path/to/key.key
        #   ca: /path/to/ca.crt
        #   skip_host_verify: false
    
    # Query service settings
    query:
      base_path: /
      static_files: /go/jaeger-ui/
      ui_config: /etc/jaeger/ui-config.json
      
      # CORS settings
      additional_headers:
        - "Access-Control-Allow-Origin: *"
        - "Access-Control-Allow-Methods: GET, POST, PUT, DELETE, OPTIONS"
        - "Access-Control-Allow-Headers: Content-Type, Authorization"
      
      # Max lookback for traces
      max_clock_skew_adjustment: "15s"
      
      # Bearer token propagation
      bearer_token_propagation: true
  
  # Sampling Strategies Configuration
  sampling_strategies.json: |
    {
      "default_strategy": {
        "type": "probabilistic",
        "param": 0.1
      },
      "per_service_strategies": [
        {
          "service": "neuromorphic-vision",
          "type": "probabilistic",
          "param": 1.0,
          "max_traces_per_second": 100
        },
        {
          "service": "neuromorphic-inference",
          "type": "adaptive",
          "param": 1.0,
          "max_traces_per_second": 200,
          "operation_strategies": [
            {
              "operation": "/api/v1/inference",
              "type": "probabilistic",
              "param": 1.0
            },
            {
              "operation": "/api/v1/batch-inference",
              "type": "probabilistic",
              "param": 0.5
            },
            {
              "operation": "/health",
              "type": "probabilistic",
              "param": 0.01
            }
          ]
        },
        {
          "service": "neuromorphic-training",
          "type": "probabilistic",
          "param": 0.1,
          "max_traces_per_second": 10
        },
        {
          "service": "database",
          "type": "probabilistic",
          "param": 0.05
        },
        {
          "service": "redis",
          "type": "probabilistic",
          "param": 0.01
        },
        {
          "service": "istio-proxy",
          "type": "probabilistic",
          "param": 0.01
        }
      ],
      "per_operation_strategies": [
        {
          "service": "neuromorphic-vision",
          "operation": "gpu_inference",
          "type": "probabilistic",
          "param": 1.0
        },
        {
          "service": "neuromorphic-vision",
          "operation": "model_load",
          "type": "probabilistic",
          "param": 1.0
        },
        {
          "service": "neuromorphic-vision",
          "operation": "preprocessing",
          "type": "probabilistic",
          "param": 0.1
        }
      ]
    }
  
  # UI Configuration
  ui-config.json: |
    {
      "monitor": {
        "menuEnabled": true
      },
      "dependencies": {
        "dagMaxServicesLen": 200,
        "menuEnabled": true
      },
      "archiveEnabled": true,
      "tracking": {
        "gaID": "",
        "trackErrors": true
      },
      "menu": [
        {
          "label": "Neuromorphic Docs",
          "url": "https://docs.neuromorphic.production.com",
          "newWindow": true
        },
        {
          "label": "Grafana",
          "url": "https://grafana.neuromorphic.production.com",
          "newWindow": true
        },
        {
          "label": "Prometheus",
          "url": "https://prometheus.neuromorphic.production.com",
          "newWindow": true
        }
      ],
      "search": {
        "maxLookback": {
          "label": "2 days",
          "value": "2d"
        },
        "maxLimit": 1500
      },
      "scripts": [
        {
          "type": "text/javascript",
          "src": "/custom/custom-metrics.js"
        }
      ],
      "qualityMetrics": {
        "menuEnabled": true
      },
      "linkPatterns": [
        {
          "type": "process",
          "key": "jaeger.version",
          "url": "https://github.com/jaegertracing/jaeger/releases/tag/#{jaeger.version}",
          "text": "Jaeger #{jaeger.version}"
        },
        {
          "type": "tags",
          "key": "error",
          "url": "https://grafana.neuromorphic.production.com/explore?orgId=1&left=[\"now-1h\",\"now\",\"Loki\",{\"expr\":\"job=neuromorphic-vision|json|error=`#{error}`\"}]",
          "text": "View error logs"
        },
        {
          "type": "tags",
          "key": "gpu.node",
          "url": "https://grafana.neuromorphic.production.com/d/gpu-dashboard?var-node=#{gpu.node}",
          "text": "GPU Node Metrics"
        }
      ]
    }

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jaeger-agent-config
  namespace: monitoring
  labels:
    app: jaeger
    component: agent
data:
  agent.yaml: |
    # Jaeger Agent Configuration
    # The agent runs as a sidecar or daemonset to collect spans locally
    
    # Collector endpoints
    reporter:
      type: grpc
      grpc:
        host_port: jaeger-collector.monitoring.svc.cluster.local:14250
        tls:
          enabled: false
          # cert_file: /path/to/cert.pem
          # key_file: /path/to/key.pem
          # ca_file: /path/to/ca.pem
          skip_host_verify: false
    
    # Local agent settings
    agent:
      # HTTP server for health checks
      http_server:
        host_port: ":5778"
      
      # Jaeger thrift compact protocol
      compact:
        host_port: ":6831"
      
      # Jaeger thrift binary protocol
      binary:
        host_port: ":6832"
      
      # Processor settings
      processors:
        - jaeger_compact
        - jaeger_binary
      
      # Tags to add to all spans
      tags:
        cluster: neuromorphic-primary
        environment: production
        region: us-west-2
    
    # Sampling client configuration
    sampling:
      # Sampling server
      host_port: jaeger-collector.monitoring.svc.cluster.local:5778
      
      # Max number of operations to track
      max_operations: 1000
      
      # Sampling refresh interval
      sampling_refresh_interval: 10s
      
      # Default sampling probability
      default_sampling_probability: 0.1
      
      # Default lower bound traces per second
      default_lower_bound_traces_per_second: 2
      
      # Default upper bound traces per second
      default_upper_bound_traces_per_second: 20
    
    # Metrics
    metrics:
      # Prometheus metrics
      prometheus:
        enabled: true
        host_port: ":14269"
        namespace: jaeger_agent
      
      # StatsD metrics (optional)
      # statsd:
      #   enabled: false
      #   host_port: "localhost:8125"
      #   prefix: jaeger_agent
    
    # Logging
    logging:
      level: info
      development: false
      encoding: json
      disable_caller: false
      disable_stacktrace: false
      sampling:
        initial: 100
        thereafter: 100
      output_paths:
        - stdout
      error_output_paths:
        - stderr

---
# Jaeger Deployment Configuration
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jaeger-all-in-one
  namespace: monitoring
  labels:
    app: jaeger
    component: all-in-one
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jaeger
      component: all-in-one
  template:
    metadata:
      labels:
        app: jaeger
        component: all-in-one
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "14269"
        sidecar.istio.io/inject: "false"
    spec:
      serviceAccountName: jaeger
      containers:
      - name: jaeger
        image: jaegertracing/all-in-one:1.48
        ports:
        - containerPort: 16686
          name: query-http
        - containerPort: 16687
          name: query-grpc
        - containerPort: 14268
          name: collector-http
        - containerPort: 14250
          name: collector-grpc
        - containerPort: 6831
          name: agent-compact
          protocol: UDP
        - containerPort: 6832
          name: agent-binary
          protocol: UDP
        - containerPort: 5778
          name: agent-http
        - containerPort: 14269
          name: admin-http
        env:
        - name: SPAN_STORAGE_TYPE
          value: elasticsearch
        - name: ES_SERVER_URLS
          value: http://elasticsearch.monitoring.svc.cluster.local:9200
        - name: ES_INDEX_PREFIX
          value: jaeger
        - name: COLLECTOR_OTLP_ENABLED
          value: "true"
        - name: QUERY_BASE_PATH
          value: /jaeger
        - name: METRICS_STORAGE_TYPE
          value: prometheus
        - name: PROMETHEUS_SERVER_URL
          value: http://prometheus.monitoring.svc.cluster.local:9090
        - name: PROMETHEUS_QUERY_SUPPORT_SPANMETRICS_CONNECTOR
          value: "true"
        - name: JAEGER_SAMPLING_STRATEGIES_FILE
          value: /etc/jaeger/sampling_strategies.json
        - name: JAEGER_AGENT_HOST
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        volumeMounts:
        - name: jaeger-config
          mountPath: /etc/jaeger
          readOnly: true
        readinessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 10
        livenessProbe:
          httpGet:
            path: /
            port: 14269
          initialDelaySeconds: 30
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
      volumes:
      - name: jaeger-config
        configMap:
          name: jaeger-configuration
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 1000

---
# Jaeger Service
apiVersion: v1
kind: Service
metadata:
  name: jaeger
  namespace: monitoring
  labels:
    app: jaeger
    component: all-in-one
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "14269"
spec:
  type: ClusterIP
  ports:
  - port: 16686
    targetPort: 16686
    name: query-http
  - port: 16687
    targetPort: 16687
    name: query-grpc
  - port: 14268
    targetPort: 14268
    name: collector-http
  - port: 14250
    targetPort: 14250
    name: collector-grpc
  - port: 6831
    targetPort: 6831
    name: agent-compact
    protocol: UDP
  - port: 6832
    targetPort: 6832
    name: agent-binary
    protocol: UDP
  - port: 5778
    targetPort: 5778
    name: agent-http
  - port: 14269
    targetPort: 14269
    name: admin-http
  selector:
    app: jaeger
    component: all-in-one

---
# Service Account for Jaeger
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jaeger
  namespace: monitoring
  labels:
    app: jaeger

---
# ClusterRole for Jaeger
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: jaeger
  labels:
    app: jaeger
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding for Jaeger
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jaeger
  labels:
    app: jaeger
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jaeger
subjects:
- kind: ServiceAccount
  name: jaeger
  namespace: monitoring
