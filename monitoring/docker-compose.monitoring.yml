version: '3.8'

# Monitoring stack for spike-snn-event-vision-kit
services:
  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: spike-snn-prometheus
    hostname: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./rules:/etc/prometheus/rules:ro
      - spike-snn-prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
      - '--storage.tsdb.retention.time=30d'
    restart: unless-stopped
    networks:
      - monitoring

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:9.2.0
    container_name: spike-snn-grafana
    hostname: grafana
    ports:
      - "3000:3000"
    volumes:
      - spike-snn-grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
      - GF_FEATURE_TOGGLES_ENABLE=ngalert
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - prometheus

  # AlertManager - Alert handling
  alertmanager:
    image: prom/alertmanager:v0.25.0
    container_name: spike-snn-alertmanager
    hostname: alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - spike-snn-alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    restart: unless-stopped
    networks:
      - monitoring

  # Node Exporter - System metrics
  node-exporter:
    image: prom/node-exporter:v1.4.0
    container_name: spike-snn-node-exporter
    hostname: node-exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    networks:
      - monitoring

  # cAdvisor - Container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.46.0
    container_name: spike-snn-cadvisor
    hostname: cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - monitoring

  # NVIDIA GPU Exporter
  nvidia-gpu-exporter:
    image: mindprince/nvidia_gpu_prometheus_exporter:0.1
    container_name: spike-snn-gpu-exporter
    hostname: nvidia-gpu-exporter
    ports:
      - "9835:9835"
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
    restart: unless-stopped
    networks:
      - monitoring

  # Pushgateway - For batch job metrics
  pushgateway:
    image: prom/pushgateway:v1.5.1
    container_name: spike-snn-pushgateway
    hostname: pushgateway
    ports:
      - "9091:9091"
    volumes:
      - spike-snn-pushgateway-data:/data
    command:
      - '--web.listen-address=:9091'
      - '--persistence.file=/data/pushgateway.db'
      - '--persistence.interval=5m'
    restart: unless-stopped
    networks:
      - monitoring

  # Jaeger - Distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:1.38
    container_name: spike-snn-jaeger
    hostname: jaeger
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # HTTP collector
      - "6831:6831/udp"  # UDP agent
      - "6832:6832/udp"  # UDP agent
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - spike-snn-jaeger-data:/tmp
    restart: unless-stopped
    networks:
      - monitoring

  # Loki - Log aggregation
  loki:
    image: grafana/loki:2.7.0
    container_name: spike-snn-loki
    hostname: loki
    ports:
      - "3100:3100"
    volumes:
      - ./loki.yml:/etc/loki/local-config.yaml:ro
      - spike-snn-loki-data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    restart: unless-stopped
    networks:
      - monitoring

  # Promtail - Log collection
  promtail:
    image: grafana/promtail:2.7.0
    container_name: spike-snn-promtail
    hostname: promtail
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./promtail.yml:/etc/promtail/config.yml:ro
    command: -config.file=/etc/promtail/config.yml
    restart: unless-stopped
    networks:
      - monitoring

  # Event Camera Metrics Exporter (custom)
  event-camera-exporter:
    build:
      context: ../
      dockerfile: Dockerfile
      target: production
    container_name: spike-snn-camera-exporter
    hostname: event-camera-exporter
    ports:
      - "9200:9200"
    environment:
      - EXPORTER_PORT=9200
      - CAMERA_TYPE=DVS128
    command: python -m spike_snn_event.monitoring.camera_exporter
    restart: unless-stopped
    networks:
      - monitoring
    depends_on:
      - prometheus

volumes:
  spike-snn-prometheus-data:
    driver: local
  spike-snn-grafana-data:
    driver: local
  spike-snn-alertmanager-data:
    driver: local
  spike-snn-pushgateway-data:
    driver: local
  spike-snn-jaeger-data:
    driver: local
  spike-snn-loki-data:
    driver: local

networks:
  monitoring:
    driver: bridge
    external: true