[tox]
# Tox configuration for spike-snn-event-vision-kit
envlist = 
    py{38,39,310,311}-{cpu,cuda}
    lint
    type-check
    security
    docs
    benchmarks

isolated_build = True
skip_missing_interpreters = True

[testenv]
# Base test environment configuration
deps = 
    pytest>=7.0.0
    pytest-cov>=4.0.0
    pytest-xdist>=3.0.0
    pytest-timeout>=2.1.0
    pytest-mock>=3.10.0
    cpu: torch==2.0.0+cpu
    cpu: torchvision==0.15.0+cpu
    cuda: torch>=2.0.0
    cuda: torchvision>=0.15.0
    cuda: cupy-cuda11x>=10.0.0

extras = 
    dev

setenv =
    PYTHONPATH = {toxinidir}/src
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
    cpu: CUDA_VISIBLE_DEVICES=""
    cuda: CUDA_VISIBLE_DEVICES=0

commands =
    # Install CPU-specific PyTorch for CPU environments
    cpu: pip install torch torchvision --index-url https://download.pytorch.org/whl/cpu
    
    # Run tests with appropriate markers
    cpu: pytest {posargs} -m "not gpu and not hardware"
    cuda: pytest {posargs} -m "not loihi and not akida"

[testenv:lint]
# Code linting
deps = 
    black>=22.0.0
    flake8>=5.0.0
    flake8-docstrings>=1.6.0
    isort>=5.10.0
    pre-commit>=2.20.0

commands =
    black --check --diff src tests
    isort --check-only --diff src tests
    flake8 src tests
    pre-commit run --all-files

[testenv:type-check]
# Type checking with mypy
deps = 
    mypy>=0.991
    types-PyYAML
    types-requests
    torch
    numpy

commands =
    mypy src/spike_snn_event

[testenv:security]
# Security analysis
deps = 
    bandit>=1.7.0
    safety>=2.0.0

commands =
    bandit -r src/spike_snn_event -f json -o {toxworkdir}/bandit-report.json
    bandit -r src/spike_snn_event
    safety check --json --output {toxworkdir}/safety-report.json
    safety check

[testenv:docs]
# Documentation building
deps = 
    sphinx>=5.0.0
    sphinx-rtd-theme>=1.0.0
    myst-parser>=0.18.0
    sphinx-autodoc-typehints>=1.19.0

changedir = docs
commands =
    sphinx-build -W -b html . _build/html
    sphinx-build -W -b linkcheck . _build/linkcheck

[testenv:benchmarks]
# Performance benchmarking
deps = 
    pytest>=7.0.0
    pytest-benchmark>=4.0.0
    torch>=2.0.0
    memory-profiler>=0.60.0

commands =
    pytest -m benchmark --benchmark-only --benchmark-json={toxworkdir}/benchmark.json

[testenv:integration]
# Integration tests
deps = 
    {[testenv]deps}
    docker>=6.0.0
    pytest-docker>=1.0.0

commands =
    pytest tests/integration {posargs} -v

[testenv:hardware-gpu]
# GPU hardware tests
deps = 
    {[testenv]deps}
    cupy-cuda11x>=10.0.0

setenv = 
    {[testenv]setenv}
    CUDA_VISIBLE_DEVICES=0

commands =
    pytest -m gpu {posargs} -v

[testenv:hardware-ros2]
# ROS2 integration tests
deps = 
    {[testenv]deps}
    rclpy>=3.0.0
    sensor-msgs>=4.0.0

setenv = 
    {[testenv]setenv}
    ROS_DOMAIN_ID=42

commands =
    pytest -m ros2 {posargs} -v

[testenv:coverage]
# Coverage reporting
deps = 
    {[testenv]deps}
    coverage[toml]>=6.0.0

setenv = 
    COVERAGE_FILE = {toxworkdir}/.coverage

commands =
    coverage combine {toxworkdir}
    coverage report
    coverage html -d {toxworkdir}/htmlcov
    coverage xml -o {toxworkdir}/coverage.xml

[testenv:clean]
# Clean up generated files
deps = 
    coverage[toml]>=6.0.0

commands =
    coverage erase
    python -c "import shutil; shutil.rmtree('.tox', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.pytest_cache', ignore_errors=True)"

[flake8]
# flake8 configuration
max-line-length = 88
extend-ignore = E203, W503, E501
exclude = 
    .git,
    __pycache__,
    build,
    dist,
    .eggs,
    *.egg,
    .tox,
    .venv,
    venv

per-file-ignores =
    __init__.py: F401
    tests/*: D100,D101,D102,D103,D104

[coverage:run]
# Coverage configuration
source = spike_snn_event
parallel = true
branch = true
omit = 
    */tests/*
    */test_*
    */__init__.py
    */conftest.py
    */setup.py

[coverage:report]
# Coverage reporting
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

show_missing = true
skip_covered = false
skip_empty = false

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml